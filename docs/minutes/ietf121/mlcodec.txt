**Session Date/Time:** 08 Nov 2024 15:30

# mlcodec

## Summary
This meeting covered several key topics related to the Opus codec, including extensions, redundancy, and enhancements. Tim presented updates on the Opus extension mechanism, specifically the "repeat these extensions" proposal. Jean-Marc provided updates on the Deep Redundancy Draft and a new proposal for a scalable quality extension for Opus. Yon presented updates on speech coding enhancement. Finally Jean-Marc proposed some simplifications to opus

## Key Discussion Points

*   **Opus Extension Mechanism (Tim):**
    *   Detailed the updates to the "repeat these extensions" proposal, including handling of L flags and short extensions.
    *   Discussed the bit rate savings achieved through the proposed extensions.
    *   Reviewed the code complexity involved in implementing the extension iterator.
    *   Addressed a clarification question about whether long extensions must be the same length.
*   **Deep Redundancy Draft (Jean-Marc):**
    *   Presented the updated decoded architecture and functional notation, matching layer names to binary weights file.
    *   Discussed options for publishing the weights and training data, including concerns about relying on third-party sites for archival purposes.
    *   Addressed the need for integrity checks (e.g., SHA-256 hashes) for archival data.
*   **Speech Coding Enhancement (Yon):**
    *   Presented a blight bandwidth extension for whiteband speech.
    *   Shared results from listening tests comparing Opus with and without the bandwidth expansion, as well as against EVS and N-Codec.
    *   Detailed how the new bandwidth expansion integrates with the existing Opus decoder structure.
    *   Discussed the qualification process for whiteband silk enhancement algorithms and requirements for meeting basic quality requirements.
    *   Addressed questions about the application of the integrity to music or celt codecs.
*   **Scalable Quality Extension (Jean-Marc):**
    *   Proposed a scalable quality extension for Opus to address limitations in bit rate, bandwidth, and bit depth.
    *   Outlined the applications for the extension, including premium codecs and non-audio uses.
    *   Explained the approach of using the extension mechanism to add a new layer for extended resolution and extra bandwidth.
*   **Opus Simplifications (Jean-Marc):**
    *   Proposed making certain features of the Opus decoder optional to reduce implementation complexity.
    *   Presented examples of optional features, such as normative mode transition, Silk stereo support, and Celt defined this folding mechanism.
    *   Discussed the benefits of such simplification, including implementation freedom and smaller code size.

## Decisions and Action Items

*   **Opus Extension Mechanism (Tim):**
    *   Tim has the "go ahead" to merge the "repeat these extensions" proposal.
    *   Address the issue of whether to change the numbering scheme to support more varieties of short extensions.
*   **Deep Redundancy Draft (Jean-Marc):**
    *   Discuss with the AD about storage options for the weights and training data.
    *   Add SHA-256 hashes of all files in the document.
    *   Ensure the script that verifies the weights is included in the document.
*   **Speech Coding Enhancement (Yon):**
    *   The working group will ask on the mailing list if there is interest in the draft.
    *   Yons draft seems like a good starting point for that work
    *   Yon will implement the modified opus compare metric in C.
    *   Yon will add PLC masks to the test vector.
    *   Decide on final threshold levels for tests.
*   **Scalable Quality Extension (Jean-Marc):**
    *   Jean-Marc will produce a draft.
*   **Opus Simplifications (Jean-Marc):**
    *   Jean-Marc to create a draft for discussion on the list.

## Next Steps

*   Post adoption question for Yon's draft to the mailing list.
*   Jean-Marc will produce a draft for both the "Scalable Quality Extension" and the "Opus Simplifications" proposals.
*   Tim will merge in the Opus extension mechanism after all other issues are resolved.
*   Address remaining issues in the Deep Redundancy Draft.
